/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "../meshSetup"

application     awcm;

startFrom       $startF; 

startTime       $TBEG;

stopAt          endTime;

endTime         $TMAX;

deltaT          $DT;

writeControl    $wrC;

writeInterval   $WI;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep   yes;

maxCo            $maxCor;


functions
{
    postLESFunc
    {
        functionObjectLibs  ("libutilityFunctionObjects.so");
        type                coded;
        redirectType        postLESFunc;
        writeControl        outputTime; //timeStep; //
        enabled             true;

        codeInclude
        #{
            #include "turbulentTransportModels.H"
            #include "turbulentTransportModel.H"
            #include "turbulenceModel.H"
            #include "LESeddyViscosity.H"
            #include "simpleFilter.H"
            #include "LESfilter.H"
            #include <chrono>
            #include <vector>
            #include <numeric>
            #include <map>
        #};
        
        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude \
            -I$(FOAM_SRC)/TurbulenceModels/turbulenceModels/lnInclude \
            -I$(FOAM_SRC)/TurbulenceModels/incompressible/lnInclude \
            -I$(FOAM_SRC)/transportModels \
        #};

        codeExecute
        #{
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            volTensorField gradU = fvc::grad(U);
            volSymmTensorField S(symm(gradU));
            const Foam::incompressible::turbulenceModel&  turbulence = mesh().thisDb().lookupObject<Foam::incompressible::turbulenceModel>("turbulenceProperties");            
            const tmp<volScalarField> tmp_nu = turbulence.nu();
            const volScalarField& nu_sgs = tmp_nu;
            const tmp<volScalarField> tmp_k = turbulence.k();
            const volScalarField& k_sgs = tmp_k;
            const tmp<volScalarField> tmp_eps = turbulence.epsilon();
            const volScalarField& eps = tmp_eps;            
            volScalarField enstr = 0.5*magSqr(fvc::curl(U));
            volVectorField omega = fvc::curl(U);
        
            static autoPtr<volScalarField> skewns;
            static autoPtr<volScalarField> vortSt;
            static autoPtr<volScalarField> strain;
            if(!skewns.valid() && !vortSt.valid() && !strain.valid())
            {
                skewns.set
                (
                    new volScalarField
                    (
                        Foam::IOobject
                        (
                            "skewness",
                            mesh().time().timeName(),
                            U.mesh(),
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ) ,
                        -1.0/3.0*(S && (S & S))
                    )
                );

                vortSt.set
                (
                    new volScalarField
                    (
                        Foam::IOobject
                        (
                            "vortexStretching",
                            mesh().time().timeName(),
                            U.mesh(),
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ) ,
                        omega & (omega & S)
                    )
                );

                strain.set
                (
                    new volScalarField
                    (
                        Foam::IOobject
                        (
                            "strainSeflAmp",
                            mesh().time().timeName(),
                            U.mesh(),
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ) ,
                        (S & S) && S
                    )
                );
            }
            volScalarField& skewness = skewns();
            volScalarField& vortexStretching = vortSt();
            volScalarField& strainSeflAmp = strain();

            if(mesh().time().writeTime())
            {
                nu_sgs.write();
                k_sgs.write();
                eps.write();
                skewness.checkIn();
                skewness.write();
                vortexStretching.checkIn();
                vortexStretching.write();
                strainSeflAmp.checkIn();
                strainSeflAmp.write();
            }
        #};
    }
    
    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        enabled         true;
        writeControl   outputTime;
	    resetOnRestart  true;
	
        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
		        window      1000;
            }

        );
    }
    #includeFunc probes
    #includeFunc probes_POD
    //#includeFunc singleGraph1
    //#includeFunc singleGraph2
    //#includeFunc singleGraph3
    //#includeFunc singleGraph4
    //#includeFunc surfaces1
    //#includeFunc surfaces2
    //#includeFunc surfaces3
    //#includeFunc surfaces4
    //#includeFunc surfaces5
    //#includeFunc wallShearStress
    #include "forces";
    #include "forceCoeffs";
}

libs ("/home/hmarefat/projects/def-alamj/hmarefat/PhD-OpenFOAM/applications/libs/libCanopyModel.so" 
      "/home/hmarefat/projects/def-alamj/shared/libs/v6/libAtmosphericTurbulenceModels.so"
      "/home/hmarefat/scratch/torchFOAM/nnSGS/nnSGS.so");

// ************************************************************************* //
