/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 500;

vertices
(
    (0 0 0) //0
    (6 0 0) //1
    (0 6 0) //2
    (6 6 0) //3
    (0 0 1) //4
    (6 0 1) //5
    (0 6 1) //6
    (6 6 1) //7
    (0 0 2) //8
    (6 0 2) //9
    (0 6 2) //10
    (6 6 2) //11
// x=6, y=6, z=2, stream=6, span=6, vertical=2
);

blocks
(

    hex (0 1 3 2 4 5 7 6)   (128 64 96) simpleGrading (1 1 1)
    hex (4 5 7 6 8 9 11 10) (128 64 96) simpleGrading (1 1 1)
    
 );

edges
(
);

boundary
(
    bottomWall
    {
        type            wall;
        faces           ((0 1 3 2));
    }
    atmosphere
    {
      type              symmetryPlane;
      //type            patch;
        faces           ((8 9 11 10));
    }

    sides1_half0
    {
        type            cyclic;
        neighbourPatch  sides1_half1;
        faces           ((0 1 5 4));
    }
    sides1_half1
    {
        type            cyclic;
        neighbourPatch  sides1_half0;
        faces           ((2 3 7 6));
    }

    sides2_half0
    {
        type            cyclic;
        neighbourPatch  sides2_half1;
        faces           ((4 5 8 9));
    }
    sides2_half1
    {
        type            cyclic;
        neighbourPatch  sides2_half0;
        faces           ((6 7 11 10));
    }

    inout1_half0
    {
      type            cyclic;
      neighbourPatch  inout1_half1;
      faces           ((1 3 7 5));
    }
    inout1_half1
    {
      type            cyclic;
      neighbourPatch  inout1_half0;
      faces           ((0 2 6 4));
    }
    
    inout2_half0
    {
      type            cyclic;
      neighbourPatch  inout2_half1;
      faces           ((5 7 11 9));
    }
    inout2_half1
    {
      type            cyclic;
      neighbourPatch  inout2_half0;
      faces           ((4 6 10 8));
    }
 );

mergePatchPairs
(
);

// ************************************************************************* //
